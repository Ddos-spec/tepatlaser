---
// Header.astro - Komponen header dengan navigasi responsif lengkap dan diperbaiki
import { NAVIGATION, SITE_CONFIG } from '../utils/constants.js';

// Filter navigasi untuk menghilangkan link "Kontak"
const filteredNavigation = NAVIGATION.filter(item => item.name !== "Kontak");
---

<header class="fixed top-0 left-0 right-0 z-40 bg-white/95 backdrop-blur-md border-b border-gray-200 transition-all duration-300" id="main-header">
  <div class="container-custom">
    <div class="flex items-center justify-between h-16 lg:h-20">
      <!-- Logo Section -->
      <div class="flex items-center">
        <a href="/tepatlaser/" class="flex items-center space-x-3 group">
          <div class="sm:block">
            <h1 class="text-xl lg:text-2xl font-bold text-gray-900 group-hover:text-blue-600 transition-colors duration-300">
              Tepat Laser
            </h1>
            <p class="text-xs text-gray-600 hidden lg:block">Laser Cutting Terpercaya</p>
          </div>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center space-x-8" aria-label="Main navigation">
        {filteredNavigation.map((item) => (
          <div class="relative group">
            {item.submenu ? (
              <div class="relative">
                <button
                  class="flex items-center space-x-1 text-gray-700 hover:text-blue-600 font-medium transition-colors duration-300 py-2"
                  aria-haspopup="true"
                  aria-expanded="false"
                >
                  <span>{item.name}</span>
                  <svg class="w-4 h-4 transition-transform duration-300 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>

                <div class="absolute top-full left-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 transform translate-y-2 group-hover:translate-y-0">
                  <div class="py-2">
                    {item.submenu.map((subitem) => (
                      <a
                        href={subitem.href}
                        class="block px-4 py-3 text-gray-700 hover:text-blue-600 hover:bg-blue-50 transition-colors duration-300 text-sm font-medium"
                      >
                        {subitem.name}
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class="text-gray-700 hover:text-blue-600 font-medium transition-colors duration-300 py-2 relative after:absolute after:bottom-0 after:left-0 after:w-0 after:h-0.5 after:bg-blue-600 after:transition-all after:duration-300 hover:after:w-full"
                class:list={[item.active && 'text-blue-600 after:w-full']}
              >
                {item.name}
              </a>
            )}
          </div>
        ))}
      </nav>

      <!-- Desktop Action Buttons -->
      <div class="hidden lg:flex items-center space-x-4">
        <a
          href="/tepatlaser/contact"
          class="btn-primary text-sm px-4 py-2"
        >
          Kontak Kita
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <button
        class="lg:hidden flex items-center justify-center w-10 h-10 rounded-lg hover:bg-gray-100 transition-colors duration-300 z-50"
        id="mobile-menu-button"
        aria-label="Toggle mobile menu"
        aria-expanded="false"
      >
        <svg class="w-6 h-6 text-gray-700 transition-all duration-300" id="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        <svg class="w-6 h-6 text-gray-700 hidden transition-all duration-300" id="close-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div
    class="lg:hidden fixed inset-0 top-0 bg-white z-30 transform translate-x-full transition-transform duration-300 ease-in-out overflow-y-auto"
    id="mobile-menu"
  >
    <!-- Mobile Header Spacer -->
    <div class="h-16 lg:h-20"></div>
    
    <div class="flex flex-col min-h-screen">
      <!-- Mobile Navigation -->
      <nav class="flex-1 px-4 py-6 space-y-2" aria-label="Mobile navigation">
        {filteredNavigation.map((item, index) => (
          <div>
            {item.submenu ? (
              <div>
                <button
                  class="flex items-center justify-between w-full text-left text-gray-700 hover:text-blue-600 font-medium py-3 px-4 rounded-lg hover:bg-gray-50 transition-colors duration-300"
                  data-submenu-index={index}
                  aria-expanded="false"
                >
                  <span>{item.name}</span>
                  <svg 
                    class="w-5 h-5 transition-transform duration-300" 
                    id={`submenu-icon-${index}`}
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
                
                <div 
                  class="max-h-0 overflow-hidden transition-all duration-300 ease-in-out"
                  id={`submenu-${index}`}
                >
                  <div class="pl-4 pt-2 pb-2 space-y-1">
                    {item.submenu.map((subitem) => (
                      <a
                        href={subitem.href}
                        class="block text-gray-600 hover:text-blue-600 py-2 px-4 rounded-lg hover:bg-gray-50 transition-colors duration-300 text-sm font-medium"
                      >
                        {subitem.name}
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class="block text-gray-700 hover:text-blue-600 font-medium py-3 px-4 rounded-lg hover:bg-gray-50 transition-colors duration-300"
                class:list={[item.active && 'text-blue-600 bg-blue-50']}
              >
                {item.name}
              </a>
            )}
          </div>
        ))}
      </nav>

      <!-- Mobile Action Buttons -->
      <div class="p-4 border-t border-gray-200 space-y-3">
        <a
          href="/tepatlaser/contact"
          class="btn-primary w-full text-center block py-3"
        >
          Kontak Kita
        </a>
        
        <!-- Mobile Quick Actions -->
        <div class="grid grid-cols-2 gap-3">
          <a
            href={`https://api.whatsapp.com/send?phone=${SITE_CONFIG.whatsapp}&text=${encodeURIComponent("Halo, saya tertarik dengan jasa laser cutting. Bisa konsultasi gratis?")}`}
            target="_blank"
            rel="noopener noreferrer"
            class="bg-green-600 hover:bg-green-700 text-white text-center py-2 px-4 rounded-lg transition-colors duration-300 text-sm font-medium flex items-center justify-center space-x-2"
          >
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
            </svg>
            <span>WhatsApp</span>
          </a>
          
          <a
            href={`tel:${SITE_CONFIG.phone}`}
            class="bg-blue-600 hover:bg-blue-700 text-white text-center py-2 px-4 rounded-lg transition-colors duration-300 text-sm font-medium flex items-center justify-center space-x-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
            </svg>
            <span>Telepon</span>
          </a>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Mobile Menu Overlay -->
<div
  class="lg:hidden fixed inset-0 bg-black/50 z-20 opacity-0 invisible transition-all duration-300"
  id="mobile-menu-overlay"
></div>

<script>
  // Mendeklarasikan tipe global untuk TypeScript (jika diperlukan)
  declare global {
    interface Window {
      mobileMenuHandler: {
        toggleSubmenu: (index: number) => void;
        closeMobileMenu: () => void;
        openMobileMenu: () => void;
        toggleMobileMenu: () => void;
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    const header = document.getElementById('main-header');

    // Utility function untuk logging (development)
    const log = (message: string, data?: any) => {
      console.log(`[Header] ${message}`, data || '');
    };

    // Mobile menu toggle functions
    function openMobileMenu(): void {
      if (mobileMenu && mobileMenuOverlay && menuIcon && closeIcon && mobileMenuButton) {
        log('Opening mobile menu');
        
        mobileMenu.classList.remove('translate-x-full');
        mobileMenu.classList.add('translate-x-0');
        mobileMenuOverlay.classList.remove('opacity-0', 'invisible');
        mobileMenuOverlay.classList.add('opacity-100', 'visible');
        menuIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'true');
        document.body.style.overflow = 'hidden';
        
        // Add event listener untuk prevent scroll
        document.addEventListener('touchmove', preventScrolling, { passive: false });
      }
    }

    function closeMobileMenu(): void {
      if (mobileMenu && mobileMenuOverlay && menuIcon && closeIcon && mobileMenuButton) {
        log('Closing mobile menu');
        
        mobileMenu.classList.remove('translate-x-0');
        mobileMenu.classList.add('translate-x-full');
        mobileMenuOverlay.classList.remove('opacity-100', 'visible');
        mobileMenuOverlay.classList.add('opacity-0', 'invisible');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
        document.body.style.overflow = '';
        
        // Remove scroll prevention
        document.removeEventListener('touchmove', preventScrolling);
        
        // Close all submenus with animation
        document.querySelectorAll('[id^="submenu-"]').forEach((submenu: Element) => {
          if (submenu instanceof HTMLElement) {
            submenu.style.maxHeight = '0px';
            submenu.classList.remove('open');
          }
        });
        
        // Reset all submenu icons
        document.querySelectorAll('[id^="submenu-icon-"]').forEach((icon: Element) => {
          if (icon instanceof HTMLElement) {
            icon.style.transform = 'rotate(0deg)';
          }
        });
        
        // Reset all submenu buttons
        document.querySelectorAll('[data-submenu-index]').forEach((button: Element) => {
          button.setAttribute('aria-expanded', 'false');
        });
      }
    }

    function toggleMobileMenu(): void {
      if (mobileMenu) {
        const isOpen = mobileMenu.classList.contains('translate-x-0');
        if (isOpen) {
          closeMobileMenu();
        } else {
          openMobileMenu();
        }
      }
    }

    // Prevent scrolling when mobile menu is open
    function preventScrolling(e: TouchEvent): void {
      e.preventDefault();
    }

    // Submenu toggle function dengan error handling
    function toggleSubmenu(index: number): void {
      try {
        const submenu = document.getElementById(`submenu-${index}`);
        const icon = document.getElementById(`submenu-icon-${index}`);
        const button = document.querySelector(`[data-submenu-index="${index}"]`);
        
        if (!submenu || !icon || !button) {
          log(`Submenu elements not found for index ${index}`);
          return;
        }
        
        const isOpen = submenu.classList.contains('open');
        
        log(`Toggling submenu ${index}, currently ${isOpen ? 'open' : 'closed'}`);
        
        if (isOpen) {
          // Close submenu
          submenu.style.maxHeight = '0px';
          submenu.classList.remove('open');
          icon.style.transform = 'rotate(0deg)';
          button.setAttribute('aria-expanded', 'false');
        } else {
          // Close other submenus first
          document.querySelectorAll('[id^="submenu-"]:not(#submenu-' + index + ')').forEach((otherSubmenu: Element) => {
            if (otherSubmenu instanceof HTMLElement && otherSubmenu.classList.contains('open')) {
              const otherIndex = otherSubmenu.id.split('-')[1];
              const otherIcon = document.getElementById(`submenu-icon-${otherIndex}`);
              const otherButton = document.querySelector(`[data-submenu-index="${otherIndex}"]`);
              
              otherSubmenu.style.maxHeight = '0px';
              otherSubmenu.classList.remove('open');
              if (otherIcon instanceof HTMLElement) {
                otherIcon.style.transform = 'rotate(0deg)';
              }
              if (otherButton) {
                otherButton.setAttribute('aria-expanded', 'false');
              }
            }
          });
          
          // Open submenu
          submenu.classList.add('open');
          submenu.style.maxHeight = submenu.scrollHeight + 20 + 'px'; // +20px for padding
          icon.style.transform = 'rotate(180deg)';
          button.setAttribute('aria-expanded', 'true');
        }
      } catch (error) {
        console.error('Error toggling submenu:', error);
      }
    }

    // Event listeners dengan error handling
    if (mobileMenuButton) {
      mobileMenuButton.addEventListener('click', (e) => {
        e.preventDefault();
        toggleMobileMenu();
      });
    }
    
    if (mobileMenuOverlay) {
      mobileMenuOverlay.addEventListener('click', closeMobileMenu);
    }

    // Submenu button event listeners
    document.querySelectorAll('[data-submenu-index]').forEach((button: Element) => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        const index = parseInt((button as HTMLElement).getAttribute('data-submenu-index') || '0');
        toggleSubmenu(index);
      });
    });

    // Close mobile menu when clicking on nav links
    document.querySelectorAll('#mobile-menu a[href]').forEach((link: Element) => {
      link.addEventListener('click', () => {
        setTimeout(() => {
          closeMobileMenu();
        }, 150); // Delay untuk smooth transition
      });
    });

    // Header scroll effects dengan debounce
    let lastScrollY = window.scrollY;
    let ticking = false;

    function updateHeaderOnScroll(): void {
      if (!header) return;
      
      const currentScrollY = window.scrollY;

      if (currentScrollY > 100) {
        header.classList.add('shadow-md');
      } else {
        header.classList.remove('shadow-md');
      }

      // Hide/show header based on scroll direction
      if (currentScrollY > lastScrollY && currentScrollY > 200) {
        header.style.transform = 'translateY(-100%)';
      } else {
        header.style.transform = 'translateY(0)';
      }

      lastScrollY = currentScrollY;
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(updateHeaderOnScroll);
        ticking = true;
      }
    });

    // Close menu on window resize to desktop
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 1024) { // lg breakpoint
        closeMobileMenu();
      }
    });

    // Handle escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenu && mobileMenu.classList.contains('translate-x-0')) {
        closeMobileMenu();
      }
    });

    // Handle focus management
    document.addEventListener('focusin', (e) => {
      if (mobileMenu && mobileMenu.classList.contains('translate-x-0')) {
        const target = e.target as HTMLElement;
        if (!mobileMenu.contains(target) && target !== mobileMenuButton) {
          // Focus escaped from mobile menu, close it
          closeMobileMenu();
        }
      }
    });

    // Expose functions globally for debugging (development only)
    if (typeof window !== 'undefined') {
      window.mobileMenuHandler = {
        toggleSubmenu,
        closeMobileMenu,
        openMobileMenu,
        toggleMobileMenu
      };
    }

    log('Header component initialized successfully');
  });
</script>

<style>
  /* Header transition styles */
  #main-header {
    transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
  }

  /* Desktop dropdown hover effects */
  .group:hover .group-hover\:opacity-100 {
    opacity: 1;
  }
  
  .group:hover .group-hover\:visible {
    visibility: visible;
  }
  
  .group:hover .group-hover\:translate-y-0 {
    transform: translateY(0);
  }
  
  .group:hover .group-hover\:rotate-180 {
    transform: rotate(180deg);
  }

  /* Mobile submenu transition */
  [id^="submenu-"] {
    transition: max-height 0.3s ease-in-out;
    overflow: hidden;
  }

  /* Smooth scrolling for mobile menu */
  #mobile-menu {
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
  }

  #mobile-menu::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }

  /* Focus styles for accessibility */
  button:focus-visible,
  a:focus-visible {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
    border-radius: 4px;
  }

  /* Animation untuk menu icons */
  #menu-icon,
  #close-icon {
    transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
  }

  /* Submenu icon rotation */
  [id^="submenu-icon-"] {
    transition: transform 0.3s ease-in-out;
  }

  /* Mobile menu backdrop blur effect */
  #mobile-menu-overlay {
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
  }

  /* Hover effects untuk mobile buttons */
  @media (hover: hover) {
    .hover\:bg-gray-50:hover {
      background-color: rgb(249 250 251);
    }
    
    .hover\:bg-blue-600:hover {
      background-color: rgb(37 99 235);
    }
    
    .hover\:bg-green-700:hover {
      background-color: rgb(21 128 61);
    }
  }

  /* Safe area untuk notch devices */
  @supports (padding-top: env(safe-area-inset-top)) {
    #main-header {
      padding-top: env(safe-area-inset-top);
    }
    
    #mobile-menu {
      top: calc(env(safe-area-inset-top));
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    #main-header {
      border-bottom-width: 2px;
    }
    
    .text-gray-700 {
      color: rgb(0 0 0);
    }
    
    .text-gray-600 {
      color: rgb(55 65 81);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    * {
      transition-duration: 0.01ms !important;
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      scroll-behavior: auto !important;
    }
  }

  /* Print styles */
  @media print {
    #main-header {
      display: none;
    }
  }
</style>